apiVersion: supply-chain.apps.tanzu.vmware.com/v1alpha1
kind: Component
metadata:
    name: trivy-image-scan-1.0.0
spec:
    config:
        - path: spec.registry
          schema:
            description: |
                Configuration for the registry to use
            properties:
                repository:
                    description: The name of the repository
                    example: my-repository
                    type: string
                server:
                    description: The name of the registry server, e.g. docker.io
                    example: docker.io
                    type: string
            required:
                - server
                - repository
            type: object
        - path: spec.source
          schema:
            properties:
                git:
                    description: |
                        Fill this object in if you want your source to come from git.
                        The tag, commit and branch fields are mutually exclusive, use only one.
                    properties:
                        branch:
                            description: A git branch ref to watch for new source
                            example: main
                            type: string
                        commit:
                            description: A git commit sha to use
                            type: string
                        tag:
                            description: A git tag ref to watch for new source
                            example: v1.0.0
                            type: string
                        url:
                            description: The url to the git source repository
                            example: https://github.com/acme/my-workload.git
                            type: string
                    required:
                        - url
                    type: object
                subPath:
                    default: ""
                    description: The sub path in the bundle to locate source code
                    example: sub-dir
                    type: string
            required:
                - git
            type: object
        - path: spec.scanning
          schema:
            description: |
                These are SCST - Scan 2.0 configuration properties for an ImageVulnerabilityScan running in a Trivy Supply Chain component.
                By default, no scanning configurations are needed to run a Trivy Supply Chain.
                If a user wants to configure:
                * activeKeyChains
                * serviceAccountNames.scanner
                * serviceAccountNames.publisher
                * workspace.bindings
                * workspace.size (default size is 4Gi because trivy scanning certain projects may require more space)
                the user can configure the properties below and reference the [SCST - Scan 2.0 docs](https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.8/tap/scst-scan-ivs-create-your-own.html)
                for more details on these parameters.
            properties:
                active-keychains:
                    description: is an array of enabled credential helpers to authenticate against registries using workload identity mechanisms.
                    items:
                        properties:
                            name:
                                type: string
                        type: object
                    type: array
                service-account-publisher:
                    description: It must have write access to the scanResults.location which is SERVER/REPOSITORY where SERVER is from spec.registry.server and REPOSITORY is from spec.registry.repository. The `imagePullSecrets` of this service account must be able to pull the TAP images. The secret in the secrets of the service account must have write access to upload the scan results. Reference [SCST - Scan 2.0 docs](https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.8/tap/scst-scan-install-app-scanning.html#configure-service-accounts-and-registry-credentials-3) for service account setup.
                    type: string
                service-account-scanner:
                    description: It must have read access to image. The `imagePullSecrets` of this service account must be able to pull the TAP images. The secret in the secrets of the service account must have read access to pull the image to scan. Reference [SCST - Scan 2.0 docs](https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.8/tap/scst-scan-install-app-scanning.html#configure-service-accounts-and-registry-credentials-3) for service account setup.
                    type: string
                workspace:
                    properties:
                        bindings:
                            items:
                                properties:
                                    configMap:
                                        description: ConfigMap represents a configMap that populate this workspace. Reference [docs](https://tekton.dev/docs/pipelines/workspaces/#configmap) for more details on ConfigMap.
                                        properties:
                                            defaultMode:
                                                description: 'defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
                                                format: int32
                                                type: integer
                                            items:
                                                description: items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
                                                items:
                                                    description: Maps a string key to a path within a volume.
                                                    properties:
                                                        key:
                                                            description: key is the key to project.
                                                            type: string
                                                        mode:
                                                            description: 'mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
                                                            format: int32
                                                            type: integer
                                                        path:
                                                            description: path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
                                                            type: string
                                                    required:
                                                        - key
                                                        - path
                                                    type: object
                                                type: array
                                            name:
                                                description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                                type: string
                                            optional:
                                                description: optional specify whether the ConfigMap or its keys must be defined
                                                type: boolean
                                        type: object
                                        x-kubernetes-map-type: atomic
                                    emptyDir:
                                        description: Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
                                        properties:
                                            medium:
                                                description: 'medium represents what type of storage medium should back this directory. The default is "" which means to use the node''s default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
                                                type: string
                                            sizeLimit:
                                                anyOf:
                                                    - type: integer
                                                    - type: string
                                                description: 'sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
                                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                                x-kubernetes-int-or-string: true
                                        type: object
                                    name:
                                        description: Name is the name of the workspace populated by the volume.
                                        type: string
                                    secret:
                                        description: Secret represents a secret that should populate this workspace.
                                        properties:
                                            defaultMode:
                                                description: 'defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
                                                format: int32
                                                type: integer
                                            items:
                                                description: items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
                                                items:
                                                    description: Maps a string key to a path within a volume.
                                                    properties:
                                                        key:
                                                            description: key is the key to project.
                                                            type: string
                                                        mode:
                                                            description: 'mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.'
                                                            format: int32
                                                            type: integer
                                                        path:
                                                            description: path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
                                                            type: string
                                                    required:
                                                        - key
                                                        - path
                                                    type: object
                                                type: array
                                            optional:
                                                description: optional field specify whether the Secret or its keys must be defined
                                                type: boolean
                                            secretName:
                                                description: 'secretName is the name of the secret in the pod''s namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret'
                                                type: string
                                        type: object
                                required:
                                    - name
                                type: object
                            type: array
                        size:
                            default: 4Gi
                            type: string
                    type: object
            type: object
    description: |
        The Trivy Supply Chain component performs an image scan using [Aquasec Trivy](https://github.com/aquasecurity/trivy)
        v0.48.3 against the OCI image built from buildpack-build component.
        Follow this [SCST - Scan 2.0 with Tanzu Supply Chain documentation](https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.8/tap/scst-scan-tanzu-supply-chain-scan-2-0-with-tanzu-supply-chain-overview.html)
        on how to:
        * Setup a Trivy Scanner Supply Chain component.
        * Create a Supply Chain that uses the SCST - Scan 2.0 with the Trivy Scanning component.
        * Create a workload that runs the Trivvy Scanning component from the Supply Chain.
    inputs:
        - name: image
          type: image
        - name: git
          type: git
    pipelineRun:
        params:
            - name: image-url
              value: $(inputs.image.url)
            - name: registry-server
              value: $(workload.spec.registry.server)
            - name: registry-repository
              value: $(workload.spec.registry.repository)
            - name: workload-name
              value: $(workload.metadata.name)
            - name: workload-namespace
              value: $(workload.metadata.namespace)
            - name: workload-uid
              value: $(workload.metadata.uid)
            - name: git-url
              value: $(workload.spec.source.git.url)
            - name: image-scanning-service-account-scanner
              value: $(workload.spec.scanning.service-account-scanner)
            - name: image-scanning-service-account-publisher
              value: $(workload.spec.scanning.service-account-publisher)
            - name: image-scanning-cli
              value: cxscssa.azurecr.io/tap-1-10-0/tap-packages@sha256:fff6c040c1ea96ccaf9c64410ef3cd787030e087e446ff1bd8008a5bd8b78d51
            - name: image-scanning-active-keychains
              value: $(workload.spec.scanning.active-keychains)
            - name: image-scanning-steps-env-vars
              value: '[{"name":"TRIVY_DB_REPOSITORY","value":"ghcr.io/aquasecurity/trivy-db"},{"name":"TRIVY_JAVA_DB_REPOSITORY","value":"ghcr.io/aquasecurity/trivy-java-db"},{"name":"TRIVY_CACHE_DIR","value":"/workspace/trivy-cache"},{"name":"XDG_CACHE_HOME","value":"/workspace/.cache"},{"name":"TMPDIR","value":"/workspace"}]'
            - name: image-scanning-workspace
              value: $(workload.spec.scanning.workspace)
        pipelineRef:
            name: trivy-image-scan-v2
