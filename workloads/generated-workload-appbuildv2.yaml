apiVersion: supplychains.tanzu.vmware.com/v1alpha1
kind: appbuildv2
metadata:
  name: tanzu-java-web-app
spec:
  #! May contain an optional array of objects. Each object is a pair of keys: `name` and either `value` or `valueFrom`.
  #! The Conventions component will translate these values into environment variables in the output object.
  env:
    #! The name of the environment variable that will be added to the Pod template spec.
    #! Required
  - name: ""
    #! The literal value of the environment variable.
    #! Note that `value` and `valueFrom` are mutually exclusive; you can only have one per item.
    value: ""
    #! Specifies a non-literal souce for the environment variable's value.
    valueFrom:
      #! Selects a resource of the container.
      resourceFieldRef:
        #! Container name: required for volumes, optional for env vars.
        containerName: ""
        #! Specifies the output format of the exposed resources.
        divisor: ""
        #! Resource to select.
        resource: ""
      #! Selects a key of a secret in the pod's namespace.
      secretKeyRef:
        #! The key of the secret to select from. Must be a valid secret key.
        key: ""
        #! The name of the referent.
        name: ""
        #! Specify whether the Secret or its key must be defined.
        optional:
      #! Select a value from a `ConfigMap`.
      configMapKeyRef:
        #! The key to select.
        key: ""
        #! The name of the referent.
        name: ""
        #! Specify whether the ConfigMap or its key must be defined.
        optional:
      #! Selects a field of the pod.
      fieldRef:
        #! Version of the schema the FieldPath is written in terms of.
        apiVersion: ""
        #! Path of the field to select in the specified API version.
        fieldPath: ""
  gitOps:
    #! the branch to commit changes to
    branch: "main"
    #! the relative path within the gitops repository to add the package configuration to.
    subPath: ""
    #! the repository to push the pull request to
    url: ""
  #! Configuration for the registry to use
  registry:
    #! The name of the registry server, e.g. docker.io
    #! Required
    server: ""
    #! The name of the repository
    #! Required
    repository: ""
  #! These are SCST - Scan 2.0 configuration properties for an ImageVulnerabilityScan running in a Trivy Supply Chain component.
  #! By default, no scanning configurations are needed to run a Trivy Supply Chain.
  #! If a user wants to configure:
  #! * activeKeyChains
  #! * serviceAccountNames.scanner
  #! * serviceAccountNames.publisher
  #! * workspace.bindings
  #! * workspace.size (default size is 4Gi because trivy scanning certain projects may require more space)
  #! the user can configure the properties below and reference the [SCST - Scan 2.0 docs](https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.8/tap/scst-scan-ivs-create-your-own.html)
  #! for more details on these parameters.
  scanning:
    #! It must have write access to the scanResults.location which is SERVER/REPOSITORY where SERVER is from spec.registry.server and REPOSITORY is from spec.registry.repository. The `imagePullSecrets` of this service account must be able to pull the TAP images. The secret in the secrets of the service account must have write access to upload the scan results. Reference [SCST - Scan 2.0 docs](https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.8/tap/scst-scan-install-app-scanning.html#configure-service-accounts-and-registry-credentials-3) for service account setup.
    service-account-publisher: ""
    #! It must have read access to image. The `imagePullSecrets` of this service account must be able to pull the TAP images. The secret in the secrets of the service account must have read access to pull the image to scan. Reference [SCST - Scan 2.0 docs](https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.8/tap/scst-scan-install-app-scanning.html#configure-service-accounts-and-registry-credentials-3) for service account setup.
    service-account-scanner: ""
    workspace:
      bindings:
        #! Secret represents a secret that should populate this workspace.
      - secret:
          #! items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
          items:
            #! key is the key to project.
            #! Required
          - key: ""
            #! mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
            mode:
            #! path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
            #! Required
            path: ""
          #! optional field specify whether the Secret or its keys must be defined
          optional:
          #! secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
          secretName: ""
          #! defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
          defaultMode:
        #! ConfigMap represents a configMap that populate this workspace. Reference [docs](https://tekton.dev/docs/pipelines/workspaces/#configmap) for more details on ConfigMap.
        configMap:
          #! Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          name: ""
          #! optional specify whether the ConfigMap or its keys must be defined
          optional:
          #! defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
          defaultMode:
          #! items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
          items:
            #! key is the key to project.
            #! Required
          - key: ""
            #! mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
            mode:
            #! path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
            #! Required
            path: ""
        #! Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
        emptyDir:
          #! medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
          medium: ""
          #! sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
          sizeLimit:
        #! Name is the name of the workspace populated by the volume.
        #! Required
        name: ""
      size: "4Gi"
    #! is an array of enabled credential helpers to authenticate against registries using workload identity mechanisms.
    active-keychains:
    - name: ""
  source:
    #! Fill this object in if you want your source to come from git.
    #! The tag, commit and branch fields are mutually exclusive, use only one.
    #! Required
    git:
      #! A git branch ref to watch for new source
      branch: ""
      #! A git commit sha to use
      commit: ""
      #! A git tag ref to watch for new source
      tag: ""
      #! The url to the git source repository
      #! Required
      url: ""
    #! The sub path in the bundle to locate source code
    subPath: ""
  #! Kpack build specification
  build:
    #! Configure workload to use a non-default builder or clusterbuilder
    builder:
      #! builder kind
      kind: "clusterbuilder"
      #! builder name
      name: "default"
    #! cache options
    cache:
      #! whether to use a cache image
      enabled: false
      #! cache image to use
      image: ""
    env:
      #! Required
    - value: ""
      #! Required
      name: ""
    #! Service account to use
    serviceAccountName: "default"
  #! Configuration for the generated Carvel Package
  carvel:
    #! The domain of the Carvel Package. Combines with spec.carvel.packageName to create the Package refName. If set to "", will use "default.tap".
    packageDomain: ""
    #! The name of the Carvel Package. Combines with spec.carvel.packageDomain to create the Package refName. If set to "", will use the workload name.
    packageName: ""
    #! Service account that gives kapp-controller privileges to create resources in the namespace.
    serviceAccountName: ""
    #! Name of the values Secret that provides customized values to the package installation's templating steps.
    valuesSecretName: ""
    #! PEM encoded certificate data for the image registry where the files will be pushed to.
    caCertData: ""
    #! Enable the use of IAAS based authentication for imgpkg.
    iaasAuthEnabled:
