apiVersion: tekton.dev/v1
kind: Task
metadata:
    name: carvel-package
spec:
    description: A task that builds a Carvel Package
    params:
        - description: Name of the Workload. Used as a default for the Carvel Package secret name.
          name: workload-name
          type: string
        - description: Name of the registry + repository to push the imgpkg bundle to.
          name: imgpkg-bundle-url
          type: string
        - default: ""
          description: |
            PEM encoded certificate data for the image registry where the files will be pushed to.
          name: imgpkg-ca-cert-data
          type: string
        - default: "false"
          description: Enable the use of IAAS based authentication for imgpkg.
          name: imgpkg-iaas-auth-enabled
          type: string
        - description: The name of the Carvel Package
          name: carvel-package-name
          type: string
        - description: The domain of the Carvel Package
          name: carvel-package-domain
          type: string
        - description: Secret that provides customized values to the package installation's templating steps
          name: carvel-package-values-secret-name
          type: string
        - default: default
          description: Service account that gives kapp-controller privileges to create resources in the namespace
          name: carvel-package-service-account
          type: string
        - default: ""
          description: the sub-path into the git repository in which to write the configuration.
          name: gitops-subpath
          type: string
        - description: The git commit digest from source-provider component.
          name: git-digest
          type: string
    results:
        - description: Carvel distributable packages that enables users to install on a different cluster.
          name: carvel-package
          type: string
        - name: imgpkg-bundle
          type: string
        - name: carvel-package-version
          type: string
    stepTemplate:
        computeResources: {}
        securityContext:
            allowPrivilegeEscalation: false
            capabilities:
                drop:
                    - ALL
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
                type: RuntimeDefault
    steps:
        - computeResources: {}
          env:
            - name: DOCKER_CONFIG
              value: /tekton/home/.docker/
            - name: HOME
              value: /tekton/home/
          image: cxscssa.azurecr.io/tap-1-8-0/tap-packages@sha256:a3f31f02bc929c3743ab38401c6593db6ba7c0e5762b488d09bd6f0c6a22798b
          name: build-imgpkg-bundle
          script: |-
            #!/bin/bash

            set -euox pipefail

            cd `mktemp -d`

            echo "[DEBUG] $(workspaces.content.path)"
            ls -al $(workspaces.content.path)

            if ls $(workspaces.content.path)/*.yaml 1> /dev/null 2>&1; then
              mv $(workspaces.content.path)/*.yaml .
            fi

            echo "[DEBUG] ."
            ls -la

            #############################################
            #    build imgpkg bundle, openapiv3 spec    #
            #############################################

            values_filename=""
            if [ -f "server-template-values.yaml" ]; then
              values_filename=server-template-values.yaml
            elif [ -f "web-template-values.yaml" ]; then
              values_filename=web-template-values.yaml
            elif [ -f "worker-template-values.yaml" ]; then
              values_filename=worker-template-values.yaml
            fi

            if [ ! -z "$values_filename" ]; then
              ytt -f "$values_filename" --data-values-schema-inspect -o openapi-v3 > "$(workspaces.content.path)/schema-openapi.yml"
            fi

            mkdir -p .imgpkg
            
            kbld -f . --imgpkg-lock-output ".imgpkg/images.yml"

            echo "[DEBUG] .imgpkg/images.yml"
            cat .imgpkg/images.yml

            imgpkg_params=""
            imgpkg_cert='$(params.imgpkg-ca-cert-data)'
            if [[ ! -z "$imgpkg_cert" ]]; then
              certs_dir=$(mktemp -d)
              echo "$imgpkg_cert" > "$certs_dir/cert"
              imgpkg_params="--registry-ca-cert-path=$certs_dir/cert"
            fi

            # this if-block can be simplified once params validation is implemented in supplychain for components
            iaas_auth_enabled='$(params.imgpkg-iaas-auth-enabled)'
            if [[ -z "$iaas_auth_enabled" ]]; then
              export IMGPKG_ENABLE_IAAS_AUTH="false"
            else
              export IMGPKG_ENABLE_IAAS_AUTH="$iaas_auth_enabled"
            fi

            imgpkg_bundle_url='$(params.imgpkg-bundle-url)'
            imgpkg push $imgpkg_params -b "$imgpkg_bundle_url" -f . --lock-output "package.lock"
            IMGPKG_BUNDLE="$(awk -F"image: " '{if ($2) print $2;}' package.lock)"
            cp package.lock $(workspaces.content.path)

            echo -n "$IMGPKG_BUNDLE" > $(results.imgpkg-bundle.path)
        - computeResources: {}
          env:
            - name: DOCKER_CONFIG
              value: /tekton/home/.docker/
            - name: HOME
              value: /tekton/home/
          image: cxscssa.azurecr.io/tap-1-8-0/tap-packages@sha256:a3f31f02bc929c3743ab38401c6593db6ba7c0e5762b488d09bd6f0c6a22798b
          name: build-carvel-package
          script: "#!/bin/bash\n\nset -euo pipefail\n\ncd `mktemp -d`\n\n# if params.carvel-package-name unset, use workload name\nCARVEL_PACKAGE_SHORT_NAME=\"$(params.carvel-package-name)\"\nif [ -z \"${CARVEL_PACKAGE_SHORT_NAME}\" ]; then\n  CARVEL_PACKAGE_SHORT_NAME=\"$(params.workload-name)\"\nfi\n\n# if params.carvel-package-domain unset, use default.tap\nCARVEL_PACKAGE_DOMAIN=\"$(params.carvel-package-domain)\"\nif [ -z \"${CARVEL_PACKAGE_DOMAIN}\" ]; then\n  CARVEL_PACKAGE_DOMAIN=\"default.tap\"\nfi\n\nCARVEL_PACKAGE_NAME=\"${CARVEL_PACKAGE_SHORT_NAME}.${CARVEL_PACKAGE_DOMAIN}\"\n\necho \"[DEBUG] CARVEL_PACKAGE_NAME\"\necho \"${CARVEL_PACKAGE_NAME}\"\n\n##############################\n#    build carvel package    #\n##############################\n\ncurrent_date=\"$(date \"+%Y%m%d%H%M%S.0.0\")\"\nCARVEL_PACKAGE_VERSION=\"${current_date}+build.$(params.git-digest)\"  \n\nIMGPKG_BUNDLE=\"$(cat $(results.imgpkg-bundle.path))\"\nCARVEL_PACKAGE_FILENAME=\"package.yaml\"\n\ncat <<EOF > ./package-template.yaml\n#@ load(\"@ytt:data\", \"data\")\n#@ load(\"@ytt:yaml\", \"yaml\")\n\napiVersion: data.packaging.carvel.dev/v1alpha1\nkind: Package\nmetadata:\n  name: ${CARVEL_PACKAGE_NAME}.${CARVEL_PACKAGE_VERSION}\nspec:\n  refName: ${CARVEL_PACKAGE_NAME}\n  version: ${CARVEL_PACKAGE_VERSION}\n  releaseNotes: |\n    Release v${CARVEL_PACKAGE_VERSION} of package ${CARVEL_PACKAGE_NAME}\n  template:\n    spec:\n      fetch:\n      - imgpkgBundle:\n          image: ${IMGPKG_BUNDLE}\n      template:\n      - ytt:\n          paths:\n          - \".\"\n      - kbld:\n          paths:\n          - \".imgpkg/images.yml\"\n          - \"-\"\n      deploy:\n      - kapp: {}\n  #@ if \"openapi\" in data.values:\n  valuesSchema:\n    openAPIv3: #@ yaml.decode(data.values.openapi)[\"components\"][\"schemas\"][\"dataValues\"]\n  #@ end\nEOF\n\nif [ -s $(workspaces.content.path)/schema-openapi.yml ]; then\n  ytt -f ./package-template.yaml --data-value openapi=\"$(cat $(workspaces.content.path)/schema-openapi.yml)\" | tee \"${CARVEL_PACKAGE_FILENAME}\"\nelse\n  ytt -f ./package-template.yaml | tee \"${CARVEL_PACKAGE_FILENAME}\"\nfi\nrm -f $(workspaces.content.path)/schema-openapi.yml\n\n#####################################\n#         build values secret       #\n#####################################\n\nVALUES_SECRET_NAME=\"${CARVEL_PACKAGE_NAME}-values\"\nif [[ -n \"$(params.carvel-package-values-secret-name)\" ]]; then\n  VALUES_SECRET_NAME=\"$(params.carvel-package-values-secret-name)\"\nfi\n\nCARVEL_SECRET_FILENAME=\"values.yaml\"\n\ncat <<EOF > ./${CARVEL_SECRET_FILENAME}\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: ${VALUES_SECRET_NAME}\nstringData:\n  values.yml: |\n    ---\n    # workload_name: example\nEOF\n\n#####################################\n#    build carvel package install   #\n#####################################\n\nCARVEL_PKGI_FILENAME=\"packageinstall.yaml\"\n\nSA_NAME=\"default\"\nif [[ -n \"$(params.carvel-package-service-account)\" ]]; then\n  SA_NAME=\"$(params.carvel-package-service-account)\"\nfi\n\ncat <<EOF > ./${CARVEL_PKGI_FILENAME}\napiVersion: packaging.carvel.dev/v1alpha1\nkind: PackageInstall\nmetadata:\n  name: ${CARVEL_PACKAGE_NAME}-pkgi\nspec:\n  packageRef:\n    refName: ${CARVEL_PACKAGE_NAME}\n    versionSelection:\n      constraints: ${CARVEL_PACKAGE_VERSION}\n      prereleases: {}\n  serviceAccountName: ${SA_NAME}\n  values:\n  - secretRef:\n      name: ${VALUES_SECRET_NAME}\nEOF\n\noutput_path=\"$(workspaces.content.path)/${CARVEL_PACKAGE_NAME}\"\nmkdir \"${output_path}\"\ncp \"${CARVEL_PACKAGE_FILENAME}\" \"${output_path}\"\ncp \"${CARVEL_PKGI_FILENAME}\" \"${output_path}\"\n\nif ! test -f \"$(workspaces.content.path)/gitops/$(params.gitops-subpath)/${CARVEL_PACKAGE_NAME}/${CARVEL_SECRET_FILENAME}\"; then\n  echo \"writing values file, no values file exists in GitOps repo\"\n  cp \"${CARVEL_SECRET_FILENAME}\" \"${output_path}\"\n\n  echo \"[DEBUG] ${output_path}/${CARVEL_SECRET_FILENAME}\"\n  cat \"${output_path}/${CARVEL_SECRET_FILENAME}\"\nelse\n  echo \"skipping values file writing, values file already exists in GitOps repo\"\nfi\n\nrm -rf \"$(workspaces.content.path)/gitops\"\n\necho \"[DEBUG] ${output_path}/${CARVEL_PACKAGE_FILENAME}\"\ncat \"${output_path}/${CARVEL_PACKAGE_FILENAME}\"\n\necho \"[DEBUG] ${output_path}/${CARVEL_PKGI_FILENAME}\"\ncat \"${output_path}/${CARVEL_PKGI_FILENAME}\"\n\necho \"[DEBUG] $(workspaces.content.path)\"\nls -al \"$(workspaces.content.path)\"\nls -al \"$(workspaces.content.path)/${CARVEL_PACKAGE_NAME}\""
    workspaces:
        - description: The folder where we write the carvel package version and imgpkg bundle path
          name: content
